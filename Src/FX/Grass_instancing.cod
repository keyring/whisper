//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbNeverChanges
{
    float4  g_vWaveDistortX = { 3, 0.400000006, 0, 0.300000012 };// Offset:    0, size:   16
    float4  g_vWaveDistortZ = { 3, 0.400000006, 0, 0.300000012 };// Offset:   16, size:   16
    float4  g_vWaveDistortY = { -1, -0.133000001, -0.333000004, -0.100000001 };// Offset:   32, size:   16
    float4  g_vWaveDirX = { -0.00600000005, -0.0120000001, 0.0240000002, 0.0480000004 };// Offset:   48, size:   16
    float4  g_vWaveDirZ = { -0.00300000003, -0.00600000005, -0.0120000001, -0.0480000004 };// Offset:   64, size:   16
    float4  g_vWaveSpeed = { 0.300000012, 0.699999988, 0.600000024, 1.39999998 };// Offset:   80, size:   16
    float   g_fPIx2 = 6.28318548;       // Offset:   96, size:    4
    float4  g_vLightingWaveScale = { 0.349999994, 0.100000001, 0.100000001, 0.0299999993 };// Offset:  112, size:   16
    float4  g_vLightingScaleBias = { 0.600000024, 0.699999988, 0.200000003, 0 };// Offset:  128, size:   16
}

cbuffer cbPerFrame
{
    float4x4 g_worldViewProj;           // Offset:    0, size:   64
    float   g_time;                     // Offset:   64, size:    4
}

//
// 5 local object(s)
//
Texture2D g_diffuseMap;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
BlendState QuadAlphaBlendState
{
    AlphaToCoverageEnable = bool(TRUE /* 1 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(ONE /* 2 */);
    SrcBlend[1] = uint(ONE /* 2 */);
    SrcBlend[2] = uint(ONE /* 2 */);
    SrcBlend[3] = uint(ONE /* 2 */);
    SrcBlend[4] = uint(ONE /* 2 */);
    SrcBlend[5] = uint(ONE /* 2 */);
    SrcBlend[6] = uint(ONE /* 2 */);
    SrcBlend[7] = uint(ONE /* 2 */);
    DestBlend[0] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[1] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[2] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[3] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[4] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[5] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[6] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[7] = uint(INV_SRC_ALPHA /* 6 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
RasterizerState EnableMSAA
{
    CullMode = uint(BACK /* 3 */);
    MultisampleEnable = bool(TRUE /* 1 */);
};
DepthStencilState EnableDepthWrite
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ALL /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 GrassRender
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbNeverChanges
                // {
                //
                //   float4 g_vWaveDistortX;            // Offset:    0 Size:    16
                //      = 0x40400000 0x3ecccccd 0x00000000 0x3e99999a 
                //   float4 g_vWaveDistortZ;            // Offset:   16 Size:    16
                //      = 0x40400000 0x3ecccccd 0x00000000 0x3e99999a 
                //   float4 g_vWaveDistortY;            // Offset:   32 Size:    16
                //      = 0xbf800000 0xbe083127 0xbeaa7efa 0xbdcccccd 
                //   float4 g_vWaveDirX;                // Offset:   48 Size:    16
                //      = 0xbbc49ba6 0xbc449ba6 0x3cc49ba6 0x3d449ba6 
                //   float4 g_vWaveDirZ;                // Offset:   64 Size:    16
                //      = 0xbb449ba6 0xbbc49ba6 0xbc449ba6 0xbd449ba6 
                //   float4 g_vWaveSpeed;               // Offset:   80 Size:    16
                //      = 0x3e99999a 0x3f333333 0x3f19999a 0x3fb33333 
                //   float g_fPIx2;                     // Offset:   96 Size:     4
                //      = 0x40c90fdb 
                //   float4 g_vLightingWaveScale;       // Offset:  112 Size:    16
                //      = 0x3eb33333 0x3dcccccd 0x3dcccccd 0x3cf5c28f 
                //   float4 g_vLightingScaleBias;       // Offset:  128 Size:    16
                //      = 0x3f19999a 0x3f333333 0x3e4ccccd 0x00000000 
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 g_worldViewProj;          // Offset:    0 Size:    64
                //   float g_time;                      // Offset:   64 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbNeverChanges                    cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // vPPos                    0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[5], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_temps 3
                
                #line 87 "D:\documents\GitHub\whisper\Src\FX\Grass_instancing.fx"
                mul r0.xyzw, v0.xxxx, cb0[3].xyzw
                mul r1.xyzw, v0.zzzz, cb0[4].xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw  // vWaveVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 90
                mul r1.xyzw, cb0[5].xyzw, cb1[4].xxxx
                add r0.xyzw, r0.xyzw, r1.xyzw  // vWaveVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 93
                frc r0.xyzw, r0.xyzw  // vWaveVec<0:NaN,1:NaN,2:NaN,3:NaN>
                add r0.xyzw, r0.xyzw, l(-0.800000, -0.800000, -0.800000, -0.800000)  // vWaveVec<0:NaN,1:NaN,2:NaN,3:NaN>
                
                #line 98
                mul r0.xyzw, r0.xyzw, cb0[6].xxxx  // vWaveVec<0:NaN,1:NaN,2:NaN,3:NaN>
                
                #line 101
                sincos r0.xyzw, null, r0.xyzw  // vWaveVec<0:NaN,1:NaN,2:NaN,3:NaN>
                
                #line 104
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vWaveDistortion<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[2].xyzw  // vWaveDistortion<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[1].xyzw  // vWaveDistortion<2:NaN:Inf>
                
                #line 109
                mov r1.w, -v1.y
                add r1.w, r1.w, l(1.000000)  // fSinWarp<0>
                mul r1.w, r1.w, r1.w  // fSinWarp<0:Inf:[0f,1.#INFf]>
                mul r1.xyz, r1.wwww, r1.xyzx  // vWaveDistortion<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 115
                add r1.xyz, r1.xzyx, v0.xzyx  // vGrassPos<1:NaN:Inf>
                mov r1.xy, r1.xyxx  // vGrassPos<0:NaN:Inf,2:NaN:Inf>
                add r1.x, r1.x, v2.x  // vGrassPos<0:NaN:Inf>
                add r1.y, r1.y, v2.y  // vGrassPos<2:NaN:Inf>
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xzyw, cb1[0].xyzw  // vout<0:NaN:Inf>
                dp4 r2.y, r1.xzyw, cb1[1].xyzw  // vout<1:NaN:Inf>
                dp4 r2.z, r1.xzyw, cb1[2].xyzw  // vout<2:NaN:Inf>
                dp4 r2.w, r1.xzyw, cb1[3].xyzw  // vout<3:NaN:Inf>
                
                #line 126
                dp4 r0.x, r0.xyzw, cb0[7].xyzw  // fScaled<0:NaN:Inf>
                mov r0.x, -r0.x
                mul r0.xyzw, r0.xxxx, cb0[8].zzzw
                add r0.xyzw, r0.xyzw, cb0[8].yyyy  // vout<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf,7:NaN:Inf>
                mov r1.xy, v1.xyxx  // vout<8,9>
                mov o0.xyzw, r2.xyzw  // RenderGrassVS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r0.xyzw  // RenderGrassVS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf,7:NaN:Inf>
                mov o2.xy, r1.xyxx  // RenderGrassVS<8,9>
                ret 
                // Approximately 34 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // g_diffuseMap                      texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 138 "D:\documents\GitHub\whisper\Src\FX\Grass_instancing.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0  // outputColor<0:Inf,1:Inf,2:Inf,3:Inf>
                mul r0.xyz, r0.xyzx, v1.xyzx  // outputColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.xyz, r0.xyzx  // RenderGrassPS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // RenderGrassPS<3:Inf>
                ret 
                // Approximately 5 instruction slots used
                            
            };
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = QuadAlphaBlendState;
            RasterizerState = EnableMSAA;
            DS_StencilRef = uint(0);
            DepthStencilState = EnableDepthWrite;
        }

    }

}

